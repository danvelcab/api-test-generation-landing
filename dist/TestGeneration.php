<?php

namespace App\Console\Commands;

use App\Http\Requests\Users\UserStoreRequest;
use Illuminate\Console\Command;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Request;
use Illuminate\Routing\Route;
use Illuminate\Routing\Router;
use Illuminate\Support\Facades\Lang;
use League\Flysystem\File;

class TestGeneration extends Command
{
    const NULL_VALUE = 'null';
    const REQUEST_PATH = '\\Http\\Requests';
    const PARAMETERS_PATH = '/../tests/Controller/parameters.txt';

    public $parameters = [];
    public $router; 

    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:generate';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct(Router $router)
    {
        $this->router = $router;
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $routes = $this->router->getRoutes();
        $exist = is_dir(app_path(). '/../tests/Controller');
        if(!$exist){
            mkdir(app_path() . '/../tests/Controller');
        }
        foreach ($routes->getRoutes() as $route){
            if(strpos($route->uri, 'api') !== false){
                $slices = explode('/', $route->uri);
                $path = '';
                $count = count($slices);
                foreach ($slices as $key => $slice){
                    if($slice != 'api'){
                        if(strpos($slice, '?') === false){
                            $path = $path . '/' . $slice;
                            $exist = is_dir(app_path() . '/../tests/Controller/' . $path);
                            if(!$exist){
                                mkdir(app_path() . '/../tests/Controller/' . $path);
                            }
                            if($key == $count - 1 || (isset($slices[$key + 1]) && strpos($slices[$key + 1], '?') !== false)){
                                $name = explode('@', $route->action['controller'])[1] . 'Test';
                                $this->extractParameters($route, $path, $name);
                                $content = $this->getContent($route, $path, $name);
                                file_put_contents(app_path() . '/../tests/Controller/' . $path . '/' . $name . '.php', $content);
                            }
                        }
                    }
                }
            }
        }
    }

    public function getContent(\Illuminate\Routing\Route $route, $path, $name){
        $parameters_contents = file_get_contents(app_path() . self::PARAMETERS_PATH);
        $authenticated_user_id = $this->getValue($parameters_contents, $path, $name, 'authenticated_user_id', 'MIDDLEWARE_PARAMS');
        $auth_type = $this->getValue($parameters_contents, $path, $name, 'auth_type', 'MIDDLEWARE_PARAMS');
//        $positive_user_id = $this->getValue($parameters_contents, $path, $name, 'positive_user_id', 'MIDDLEWARE_PARAMS');
        $negative_user_id = self::NULL_VALUE;
        $parameters = $this->getParameters($parameters_contents, $route, $path, $name);
        $positive_parameters = $this->getPositiveParameters($parameters);
        $negative_parameters = $this->getNegativeParameters($parameters);
        $url = $this->getUrl($route->uri(), $parameters_contents, $path, $name);
        $method = $this->getMethod($route->methods());
        $ok_code = $this->getCode($method);
        $validation_fail_code = 422;

        $content = "";
        $content .= $this->addLine("<?php");
        $content .= $this->addLine("/** Test autogenerated by API Test Generator */");
        $content .= $this->addLine("/** Developed By Daniel VelÃ¡zquez */");
        $content .= $this->addLine("class " . $name . " extends \Tests\TestCase");
        $content .= $this->addLine("{");
        $content .= $this->addLine('    public $negative_user_id;');
        $content .= $this->addLine('    public $positive_user_id;');
        $content .= $this->addLine('    public $method;');
        $content .= $this->addLine('    public $url;');
        $content .= $this->addLine('    public $authenticated_user_id;');
        $content .= $this->addLine('    public $positive_parameters;');
        $content .= $this->addLine('    public $negative_parameters;');
        $content .= $this->addLine('    public $token;');
        $content .= $this->addLine('    public $ok_code;');
        $content .= $this->addLine('    public $error_code;');
        $content .= $this->addLine('    public $validation_error_code;');
        $content .= $this->addLine('    public function __construct(){');
        $content .= $this->addLine('        parent::__construct();');
        $content .= $this->addLine('        $this->authenticated_user_id = ' . $authenticated_user_id . ';');
//        $content .= $this->addLine('        $this->positive_user_id = ' . $positive_user_id . ';');
//        $content .= $this->addLine('        $this->negative_user_id = ' . $negative_user_id . ';');
        $content .= $this->addLine('        $this->method = "'. $method . '";');
        $content .= $this->addLine('        $this->url = "'. $url . '";');
        $content .= $this->addLine('        $this->positive_parameters = ' . $positive_parameters . ';');
        $content .= $this->addLine('        $this->negative_parameters = ' . $negative_parameters . ';');
        $content .= $this->addLine('        $this->ok_code = ' . $ok_code . ';');
        $content .= $this->addLine('        $this->error_code = 500;');
        $content .= $this->addLine('        $this->validation_error_code = 422;');
        $content .= $this->addLine('    }');
        $content .= $this->addLine('    public function setUp(){');
        $content .= $this->addLine('        parent::setUp();');
        $content .= $this->addLine('        $this->artisan("db:seed");');
        $content .= $this->addLine('        if($this->authenticated_user_id != null){');
        $content .= $this->addLine('            $user = \App\User::find($this->authenticated_user_id);');
        if($auth_type == 'jwt'){
            $content .= $this->addLine('            $this->token = \Tymon\JWTAuth\Facades\JWTAuth::fromUser($user);');
            $content .= $this->addLine('            $this->refreshApplication();');
        }else{
            $content .= $this->addLine('            $this->be($user);');
        }
        $content .= $this->addLine('        }');
        $content .= $this->addLine('    }');
        $content .= $this->addLine('    public function tearDown(){');
        $content .= $this->addLine('        $this->beforeApplicationDestroyed(function () {');
        $content .= $this->addLine('            \Illuminate\Support\Facades\DB::disconnect();');
        $content .= $this->addLine('        });');
        $content .= $this->addLine('        parent::tearDown();');
        $content .= $this->addLine('    }');
        $content .= $this->addLine('    public function testPositive(){');
        if($positive_parameters != self::NULL_VALUE && count($positive_parameters) > 0){
            $content .= $this->addLine('        $this->executeCall($this->positive_parameters, $this->ok_code);');
        }else{
            $content .= $this->addLine('        $this->executeCall($this->ok_code);');
        }
        $content .= $this->addLine('    }');
        if($negative_user_id != self::NULL_VALUE){
            $content .= $this->addLine('    public function testNegativePermissions(){');
            $content .= $this->addLine('        if($this->negative_user_id != null){');
            $content .= $this->addLine('            $user = \App\User::find($this->negative_user_id);');
            $content .= $this->addLine('            $this->token = \Tymon\JWTAuth\Facades\JWTAuth::fromUser($user);');
            $content .= $this->addLine('            $this->refreshApplication();');
            $content .= $this->addLine('            $this->executeCall($this->positive_parameters, true);');
            $content .= $this->addLine('        }');
            $content .= $this->addLine('    }');
        }
        if($parameters != self::NULL_VALUE && count($parameters) > 0){
            $i = 0;
            foreach ($parameters as $key => $parameter){
                foreach ($parameter['rules'] as $rule){
                    $r = ucfirst(explode(':', $rule['rule'])[0]);
                    $key = ucfirst($key);
                    $content .= $this->addLine('    public function test'. $key . $r . 'Negative(){');
                    if(is_array($rule['message'])){
                        $message = $this->getMessage($parameter['rules'], $rule['message']);
                    }else{
                        $message = $rule['message'];
                    }
                    $content .= $this->addLine('        $this->executeCall($this->negative_parameters['. $i .'], ' .
                        $validation_fail_code .', "' . $message . '");');
                    $content .= $this->addLine('    }');
                    $i++;
                }
            }
        }
        if($parameters != self::NULL_VALUE && count($parameters) > 0){
            $content .= $this->addLine('    public function executeCall($parameters, $code, $message = null){');
        }else{
            $content .= $this->addLine('    public function executeCall($code, $message = null){');
        }
        $content .= $this->addLine('        $json = $this->json($this->method, $this->url');
        if($parameters != self::NULL_VALUE && count($parameters) > 0){
            $content .= $this->addLine('            ,$parameters');
        }
        if($authenticated_user_id != self::NULL_VALUE){
            $content .= $this->addLine('            ,array(');
            $content .= $this->addLine('                "Authorization" => "Bearer $this->token"');
            $content .= $this->addLine('             )');
        }
        $content .= $this->addLine('        );');
        $content .= $this->addLine('        $json->assertStatus($code);');
        $content .= $this->addLine('    }');

        $content .= $this->addLine("}");
        return $content;
    }
    public function extractParameters(Route $route, $path, $name){
        $old_content = file_get_contents(app_path() . '/../tests/Controller/parameters.txt');
        $url_parameters = [];
        $query_parameters = [];
        $form_parameters = [];
        $middleware_parameters = [];
        $uri = $route->uri();
        while(strpos($uri, '{') !== false){
            $start = strpos($uri,'{');
            $end = strpos($uri, '}');
            $key = substr($uri, $start, $end - $start + 1);
            if(strpos($key, '?')){
                $value = $this->getValue($old_content, $path, $name, $key, 'QUERY_PARAMS');
                $query_parameters[$key] = $value;
            }else{
                $value = $this->getValue($old_content, $path, $name, $key, 'URL_PARAMS');
                $url_parameters[$key] = $value;
            }
            $uri = substr($uri, $end + 2);
        }

        /**
         * Getting form parameters
         */
        $controller_path = explode('@', $route->getAction()['controller'])[0];
        $pos = strpos($controller_path, 'Controller');
        $controller_name = substr($controller_path, $pos + 12);
        $controller_function = $route->getActionMethod();
        $controller_content = file_get_contents(app_path() . '/Http/Controllers/' . $controller_name . '.php');
        $start_function = strpos($controller_content, $controller_function . '(');
        $controller_content = substr($controller_content, $start_function);
        $end_function = strpos($controller_content, ')');
        $controller_content = substr($controller_content, 0, $end_function);
        $pos_request = strpos($controller_content, 'Request');
        if($pos_request !== false) {
            $start_request = strpos($controller_content, '(') + 1;
            $end_request = $pos_request + 8;
            $form_request_name = substr($controller_content, $start_request, $end_request - $start_request - 1);
            $request_file = $this->searchFile(app_path() . self::REQUEST_PATH, $form_request_name . '.php');
            $request_content = file_get_contents($request_file);
            $start_namespace = strpos($request_content, 'namespace');
            $request_content = substr($request_content, $start_namespace + 10);
            $end_namespace = strpos($request_content, ';');
            $namespace = substr($request_content, 0, $end_namespace);

            $form_request_name = $namespace . '\\' .$form_request_name;
            $request = new $form_request_name;
            foreach ($request->rules() as $key => $rule){
                $form_parameters[$key] = $this->getValue($old_content, $path, $name, $key, 'FORM_PARAMS');
                $rules = explode('|', $rule);
                foreach ($rules as $r){
                    if($r !== 'required'){
                        $form_parameters[$key . ".!" .$r] = $this->getValue($old_content, $path, $name, $key, 'FORM_PARAMS', '!' . $r);
                    }
                }
            }
        }

        /**
         * End getting form parameters
         */

        /**
         * Getting middleware jwt.auth parameters
         */

        $middlewares = $route->getAction()['middleware'];
        if((is_array($middlewares) && in_array('jwt.auth', $middlewares))
            || $middlewares === 'jwt.auth'){
            $middleware_parameters['authenticated_user_id'] = $this->getValue($old_content, $path, $name, 'authenticated_user_id', 'MIDDLEWARE_PARAMS');
        }

        /**
         * End getting middleware jwt.auth parameters
         */

        $this->parameters[$path . '.' .$name . '.TITLE'] = $path . '.' .$name;
        $url_params_key = $path . '.' .$name . '.URL_PARAMS';
        $this->parameters[$url_params_key] = $url_parameters;
        $query_params_key = $path . '.' .$name . '.QUERY_PARAMS';
        $this->parameters[$query_params_key] = $query_parameters;
        $form_params_key = $path . '.' .$name . '.FORM_PARAMS';
        $this->parameters[$form_params_key] = $form_parameters;
        $middleware_params_key = $path . '.' .$name . '.MIDDLEWARE_PARAMS';
        $this->parameters[$middleware_params_key] = $middleware_parameters;

    }
    private function addLine($text)
    {
        return $text . "\n";
    }
    private function getMethod($methods){
        foreach ($methods as $method){
            if($method != 'HEAD'){
                return $method;
            }
        }
    }
    private function getUrl($uri, $contents, $path, $name){
        if(strpos($uri, '{') === false){
            return $uri;
        }else{
            $aux_uri = $uri;
            while(strpos($uri, '{') !== false){
                $start = strpos($uri,'{');
                $end = strpos($uri, '}');
                $key = substr($uri, $start, $end - $start + 1);
                if(strpos($key, '?')){
                    $value = $this->getValue($contents, $path, $name, $key, 'QUERY_PARAMS');
                }else{
                    $value = $this->getValue($contents, $path, $name, $key, 'URL_PARAMS');
                }
                $aux_uri = str_replace($key, $value, $aux_uri);
                $uri = substr($uri, $end + 2);
            }
        }
        return $aux_uri;
    }
    private function getParameters($content, Route $route, $path, $name){
        $parameters_result = [];
        $specifications_content = file_get_contents(app_path() . '/../tests/Controller/specifications.txt');
        $pos_query_params = strpos($specifications_content, $path . "." . $name . "." . "FORM_PARAMS");
        if($pos_query_params !== false) {
            $aux_content = substr($specifications_content, $pos_query_params + strlen($path . "." . $name . "." . "FORM_PARAMS") + 2);
            $aux_content_end = strpos($aux_content, "##");
            if($aux_content_end === false){
                $aux_content_end = strlen($aux_content) -1;
            }
            $aux_content = substr($aux_content, 0, $aux_content_end);
            $parameters = $this->getParametersWithRules($aux_content);
            foreach ($parameters as $key => $rules){
                $parameters_result[$key] = [
                    'value' => $this->getValue($content, $path, $name, $key, 'FORM_PARAMS'),
                    'rules' => []
                ];
                foreach ($rules as $rule){
                    $r = [
                        'rule' => $rule,
                        'message' => $this->getRuleMessage($key, $rule),
                        'value'     => $this->getValue($content, $path, $name, $key, 'FORM_PARAMS', '!' . $rule)
                    ];
                    array_push($parameters_result[$key]['rules'], $r);
                }
            }

        }
        return $parameters_result;
    }
    private function getParametersWithRules($parameters_string){
        $parameters = [];
        $rules_string_exploded = explode('>', $parameters_string);
        foreach ($rules_string_exploded as $parameter){
            $rules = [];
            $parameter_explode = explode("\n", $parameter);
            $parameter = substr($parameter_explode[0], 0, strlen($parameter_explode[0]) - 1);
            foreach ($parameter_explode as $line){
                if(strpos($line, $parameter . ".") !== false){
                    $aux = explode(".", $line);
                    array_push($rules, substr($aux[1], 0, strlen($aux[1]) - 1));
                }
            }
            $parameters[$parameter] = $rules;
        }
        return $parameters;
    }
    private function getPositiveParameters($parameters){
        $result = self::NULL_VALUE;
        foreach ($parameters as $key => $rule){
            if($result == self::NULL_VALUE){
                $result = "\n       [\n";
            }
            $result .= "\n          '" . $key . "'  =>  " . $parameters[$key]['value'] . ",";
        }
        if($result != self::NULL_VALUE){
            $result .= "\n          ]\n";
        }
        return $result;
    }
    private function getNegativeParameters($parameters_array){
        $result = self::NULL_VALUE;
        foreach ($parameters_array as $key => $parameters){
            if($result == self::NULL_VALUE){
                $result = "[\n";
            }
            $r = "";
            foreach ($parameters['rules'] as $rule){
                $r2 = self::NULL_VALUE;
                foreach ($parameters_array as $key2 => $p){
                    if($r2 == self::NULL_VALUE){
                        $r2 = "[\n";
                    }
                    if($key2 == $key){
                        if($rule['rule'] == 'required'){
                            $r2 .= "\n          '" . $key2 . "'  =>  " . 'null' . ",";
                        }else{
                            $r2 .= "\n          '" . $key2 . "'  =>  " . $rule['value'] . ",";
                        }
                    }else{
                        $r2 .= "\n          '" . $key2 . "'  =>  " . $parameters_array[$key2]['value'] . ",";
                    }
                }
                if($r2 != self::NULL_VALUE){
                    $r2 .= "\n          ]";
                }
                $r .= "\n           " . $r2 . ",\n";

            }
            $result .= "\n          " . $r . "";

        }
        if($result != self::NULL_VALUE){
            $result .= "\n          ]\n";
        }
        return $result;
    }
    private function getCode($method){
        if($method == 'POST'){
            return 201;
        }else{
            return 200;
        }
    }
    private function getValue($old_content, $path, $name, $key, $type, $rule = null){
        $value = 'null';
        $needle = $path . '.' . $name . '.' .  $type;
        $start = strpos($old_content, $needle);
        $old_content = substr($old_content, $start + strlen($needle));
        $end = strpos($old_content, '##');
        if($rule == null){
            $pos = strpos($old_content, $key);
        }else{
            $pos = strpos($old_content, $key . '.' . $rule);
        }
        if($pos != null && ($end == null || $pos < $end)){
            $old_content = substr($old_content, $pos);
            $equal_pos = strpos($old_content, '=') + 1;
            $end_pos = strpos($old_content, ';');
            $value = substr($old_content, $equal_pos, $end_pos - $equal_pos);
        }
        return $value;
    }

    private function getRuleMessage($key, $rule){
//        $messages = $request->messages();
        $messages = [];
        if(strpos($rule, ':')){
            $rule_explode = explode(':', $rule);
            $rule = $rule_explode[0];
            $param = $rule_explode[1];
        }
        if(isset($messages[$key . '.' . $rule])){
            return $messages[$key . '.' . $rule];
        }else{
            if(isset(Lang::get('validation')[$rule])){
                $message = Lang::get('validation')[$rule];
                $message = str_replace(':attribute', $key, $message);
                if(isset($param)){
                    $message = str_replace(':min', $param, $message);
                    $message = str_replace(':max', $param, $message);
                }
                return $message;
            }else{
                return '';
            }
        }
    }

    private function getMessage($rules, $messages){
        foreach ($rules as $rule){
            $r = explode(':', $rule['rule'])[0];
            if(isset($messages[$r])){
                return $messages[$r];
            }
        }
    }

    private function searchFile($dir, $file){   // Funcion Recursiva
        // Autor DeeRme
        // http://deerme.org
        if ( is_dir($dir) )
        {
            // Recorremos Directorio
            $d=opendir($dir);
            while( $archivo = readdir($d) )
            {
                if ( $archivo!="." AND $archivo!=".."  )
                {

                    if ( is_file($dir.'/'.$archivo) )
                    {
                        // Es Archivo
                        if ( $archivo == $file  )
                        {
                            return ($dir.'/'.$archivo);
                        }

                    }

                    if ( is_dir($dir.'/'.$archivo) )
                    {
                        // Es Directorio
                        // Volvemos a llamar
                        $r=$this->searchFile($dir.'/'.$archivo,$file);
                        if ( basename($r) == $file )
                        {
                            return $r;
                        }


                    }





                }

            }

        }
        return FALSE;
    }

}
